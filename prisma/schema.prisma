// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model restaurants {
  id                             Int                              @id @default(autoincrement())
  name                           String                           @unique @db.VarChar(100)
  display_name                   String                           @db.VarChar(255)
  description                    String?
  created_at                     DateTime?                        @default(now()) @db.Timestamp(6)
  user_restaurant_authorizations user_restaurant_authorizations[]
}

model transfers {
  id           BigInt    @id
  from_account String
  amount       String
  symbol       String
  memo         String?
  parsed_memo  String?
  fulfilled    Boolean?  @default(false)
  received_at  DateTime? @default(now()) @db.Timestamptz(6)
  fulfilled_at DateTime? @db.Timestamptz(6)
}

model user_restaurant_authorizations {
  id            Int         @id @default(autoincrement())
  user_id       Int
  restaurant_id Int
  role          String      @default("admin") @db.VarChar(50)
  created_at    DateTime?   @default(now()) @db.Timestamp(6)
  restaurants   restaurants @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users         users       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([user_id, restaurant_id])
}

model users {
  id                             Int                              @id @default(autoincrement())
  hive_username                  String                           @unique @db.VarChar(100)
  display_name                   String?                          @db.VarChar(255)
  email                          String?                          @db.VarChar(255)
  is_active                      Boolean?                         @default(true)
  created_at                     DateTime?                        @default(now()) @db.Timestamp(6)
  user_restaurant_authorizations user_restaurant_authorizations[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model categories {
  category_id       Int                 @id @default(autoincrement())
  name              String              @db.VarChar(100)
  type              String?             @db.VarChar(10)
  categories_dishes categories_dishes[]
  categories_drinks categories_drinks[]
}

model categories_dishes {
  category_id Int
  dish_id     Int
  categories  categories @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  dishes      dishes     @relation(fields: [dish_id], references: [dish_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([category_id, dish_id])
}

model categories_drinks {
  category_id Int
  drink_id    Int
  categories  categories @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction)
  drinks      drinks     @relation(fields: [drink_id], references: [drink_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([category_id, drink_id])
}

model cuisson {
  cuisson_id     Int              @id @default(autoincrement())
  english_name   String           @db.VarChar(50)
  french_name    String           @db.VarChar(50)
  dishes_cuisson dishes_cuisson[]
}

model currency_conversion {
  date            DateTime @id @db.Date
  conversion_rate Decimal  @db.Decimal(10, 4)
}

model dishes {
  dish_id           Int                 @id @default(autoincrement())
  name              String              @db.VarChar(200)
  price_eur         Decimal             @db.Decimal(10, 2)
  record_date       DateTime            @default(dbgenerated("'2025-05-29'::date")) @db.Date
  categories_dishes categories_dishes[]
  dishes_cuisson    dishes_cuisson[]
}

model dishes_cuisson {
  dish_id    Int
  cuisson_id Int
  cuisson    cuisson @relation(fields: [cuisson_id], references: [cuisson_id], onDelete: NoAction, onUpdate: NoAction)
  dishes     dishes  @relation(fields: [dish_id], references: [dish_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([dish_id, cuisson_id])
}

model drink_sizes {
  drink_id    Int
  size        String   @db.VarChar(50)
  price_eur   Decimal  @db.Decimal(10, 2)
  record_date DateTime @default(dbgenerated("'2025-06-01'::date")) @db.Date
  drinks      drinks   @relation(fields: [drink_id], references: [drink_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([drink_id, size])
}

model drinks {
  drink_id           Int                  @id @default(autoincrement())
  name               String               @db.VarChar(200)
  record_date        DateTime             @default(dbgenerated("'2025-06-01'::date")) @db.Date
  categories_drinks  categories_drinks[]
  drink_sizes        drink_sizes[]
  drinks_ingredients drinks_ingredients[]
}

model drinks_ingredients {
  drink_id      Int
  ingredient_id Int
  drinks        drinks      @relation(fields: [drink_id], references: [drink_id], onDelete: NoAction, onUpdate: NoAction)
  ingredients   ingredients @relation(fields: [ingredient_id], references: [ingredient_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([drink_id, ingredient_id])
}

model ingredients {
  ingredient_id      Int                  @id @default(autoincrement())
  name               String               @unique @db.VarChar(100)
  drinks_ingredients drinks_ingredients[]
}

model orders {
  order_id   Int     @id @default(autoincrement())
  recipient  String  @default("indies.cafe") @db.VarChar(50)
  amount_hbd Decimal @db.Decimal(10, 3)
  memo       String  @db.VarChar(255)
  hive_uri   String? @db.VarChar(255)
}

model restaurant_tables {
  table_number String @id @db.VarChar(10)
  location     String @db.VarChar(50)
}
